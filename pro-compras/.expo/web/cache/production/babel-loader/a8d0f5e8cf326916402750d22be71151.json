{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useEffect,useMemo}from\"react\";import{Provider as PaperProvider}from\"react-native-paper\";import jwtDecode from\"jwt-decode\";import AuthScreen from\"./src/screens/AuthScreen\";import UserNavigation from\"./src/navigation/UserNavigation\";import{getTokenApi,setTokenApi,removeTokenApi}from\"./src/api/token\";import AuthContext from\"./src/context/AuthContext\";export default function App(){var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),auth=_useState2[0],setAuth=_useState2[1];useEffect(function(){(function _callee(){var token;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(getTokenApi());case 2:token=_context.sent;if(token){setAuth({token:token,idUser:jwtDecode(token).id});}else{setAuth(null);}case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);})();},[]);var login=function login(user){setTokenApi(user.jwt);setAuth({token:user.jwt,idUser:jwtDecode(user.jwt).id});};var logout=function logout(){if(auth){removeTokenApi();setAuth(null);}};var authData=useMemo(function(){return{auth:auth,login:login,logout:logout,setReloadUser:null};},[auth]);if(auth===undefined)return null;return React.createElement(AuthContext.Provider,{value:authData},React.createElement(PaperProvider,null,auth?React.createElement(UserNavigation,null):React.createElement(AuthScreen,null)));}","map":{"version":3,"sources":["C:/Users/anten/OneDrive/Escritorio/Nueva carpeta/pro-compras/App.js"],"names":["React","useState","useEffect","useMemo","Provider","PaperProvider","jwtDecode","AuthScreen","UserNavigation","getTokenApi","setTokenApi","removeTokenApi","AuthContext","App","undefined","auth","setAuth","token","idUser","id","login","user","jwt","logout","authData","setReloadUser"],"mappings":"6HAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,OAArC,KAAoD,OAApD,CACA,OAASC,QAAQ,GAAIC,CAAAA,aAArB,KAA0C,oBAA1C,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,UAAP,gCACA,MAAOC,CAAAA,cAAP,uCACA,OAASC,WAAT,CAAsBC,WAAtB,CAAmCC,cAAnC,uBACA,MAAOC,CAAAA,WAAP,iCAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,eACJZ,QAAQ,CAACa,SAAD,CADJ,wCACrBC,IADqB,eACfC,OADe,eAG5Bd,SAAS,CAAC,UAAM,CACd,CAAC,+LACqBO,WAAW,EADhC,SACOQ,KADP,eAEC,GAAIA,KAAJ,CAAW,CACTD,OAAO,CAAC,CACNC,KAAK,CAALA,KADM,CAENC,MAAM,CAAEZ,SAAS,CAACW,KAAD,CAAT,CAAiBE,EAFnB,CAAD,CAAP,CAID,CALD,IAKO,CACLH,OAAO,CAAC,IAAD,CAAP,CACD,CATF,qEAAD,IAWD,CAZQ,CAYN,EAZM,CAAT,CAcA,GAAMI,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,IAAD,CAAU,CACtBX,WAAW,CAACW,IAAI,CAACC,GAAN,CAAX,CACAN,OAAO,CAAC,CACNC,KAAK,CAAEI,IAAI,CAACC,GADN,CAENJ,MAAM,CAAEZ,SAAS,CAACe,IAAI,CAACC,GAAN,CAAT,CAAoBH,EAFtB,CAAD,CAAP,CAID,CAND,CAQA,GAAMI,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,GAAIR,IAAJ,CAAU,CACRJ,cAAc,GACdK,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CALD,CAOA,GAAMQ,CAAAA,QAAQ,CAAGrB,OAAO,CACtB,iBAAO,CACLY,IAAI,CAAJA,IADK,CAELK,KAAK,CAALA,KAFK,CAGLG,MAAM,CAANA,MAHK,CAILE,aAAa,CAAE,IAJV,CAAP,EADsB,CAOtB,CAACV,IAAD,CAPsB,CAAxB,CAUA,GAAIA,IAAI,GAAKD,SAAb,CAAwB,MAAO,KAAP,CAExB,MACE,qBAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAEU,QAA7B,EACE,oBAAC,aAAD,MACGT,IAAI,CAAG,oBAAC,cAAD,MAAH,CAAwB,oBAAC,UAAD,MAD/B,CADF,CADF,CAOD","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport jwtDecode from \"jwt-decode\";\nimport AuthScreen from \"./src/screens/AuthScreen\";\nimport UserNavigation from \"./src/navigation/UserNavigation\";\nimport { getTokenApi, setTokenApi, removeTokenApi } from \"./src/api/token\";\nimport AuthContext from \"./src/context/AuthContext\";\n\nexport default function App() {\n  const [auth, setAuth] = useState(undefined);\n\n  useEffect(() => {\n    (async () => {\n      const token = await getTokenApi();\n      if (token) {\n        setAuth({\n          token,\n          idUser: jwtDecode(token).id,\n        });\n      } else {\n        setAuth(null);\n      }\n    })();\n  }, []);\n\n  const login = (user) => {\n    setTokenApi(user.jwt);\n    setAuth({\n      token: user.jwt,\n      idUser: jwtDecode(user.jwt).id,\n    });\n  };\n\n  const logout = () => {\n    if (auth) {\n      removeTokenApi();\n      setAuth(null);\n    }\n  };\n\n  const authData = useMemo(\n    () => ({\n      auth,\n      login,\n      logout,\n      setReloadUser: null,\n    }),\n    [auth]\n  );\n\n  if (auth === undefined) return null;\n\n  return (\n    <AuthContext.Provider value={authData}>\n      <PaperProvider>\n        {auth ? <UserNavigation /> : <AuthScreen />}\n      </PaperProvider>\n    </AuthContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}